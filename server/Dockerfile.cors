# Use an official Go runtime as a parent image
FROM golang:1.21-bullseye AS builder

# Set the working directory in the container
WORKDIR /app

# Copy go.mod and go.sum files
COPY go.mod go.sum ./

# Download all dependencies
RUN go mod download

# Copy the source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server .

# Use a smaller base image for the final stage
FROM debian:bullseye-slim

# Install CA certificates
RUN apt-get update && apt-get install -y ca-certificates && rm -rf /var/lib/apt/lists/*

# Set the working directory
WORKDIR /app

# Copy the binary from the builder stage
COPY --from=builder /app/server /app/
COPY .env /app/
COPY verdant-coyote-455921-h1-22d94077f635.json /app/

# Make the binary executable
RUN chmod +x /app/server

# Set environment variables for CORS
ENV CORS_ALLOW_ORIGINS="https://verdant-coyote-455921-h1.web.app,http://localhost:8080,http://localhost:3000"
ENV CORS_ALLOW_CREDENTIALS="true"
ENV GIN_MODE=release
ENV PORT=8080
ENV K_SERVICE=bettermeet-server
ENV GOOGLE_APPLICATION_CREDENTIALS="/app/verdant-coyote-455921-h1-22d94077f635.json"

# Expose port
EXPOSE 8080

# Run the binary
CMD ["/app/server", "-release"]
